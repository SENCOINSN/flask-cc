pipeline {

    // Utilisation du nouvel agent cloud Docker Python
    agent { label 'python-agent' }

    environment {
        // Nom de l'image Docker √† manipuler
        DOCKER_IMAGE = 'flaskapp-image'
        
        // Tag source √† r√©cup√©rer depuis Harbor (image g√©n√©r√©e c√¥t√© dev)
        SNAPSHOT_TAG = 'dev-SNAPSHOT'
        
        // Tag de release transmis en param√®tre (ex : v1.0.0)
        RELEASE_TAG = "${params.RELEASE_TAG}"

        // Adresse du registre Docker (Harbor)
        REGISTRY = 'ghcr.io/sencoinsn'

        // Nom du repository de l'image sur Harbor
        REPO = 'flask-app'
    }

    stages {

        // R√©cup√©ration de l'image SNAPSHOT existante depuis Harbor
        // stage('Pull Snapshot Image from Harbor') {
        //     steps {
        //         withCredentials([usernamePassword(
        //             credentialsId: "token-harbor",
        //             usernameVariable: "DOCKER_USER",
        //             passwordVariable: "DOCKER_PASSWORD"
        //         )]) {
        //             sh '''
        //                 echo "$DOCKER_PASSWORD" | docker login $REGISTRY -u "$DOCKER_USER" --password-stdin
        //                 docker pull $REGISTRY/$REPO/${DOCKER_IMAGE}:${SNAPSHOT_TAG}
        //             '''
        //         }
        //     }
        // }

        stage('pull to github registry'){
            steps{
                script{
                    withDockerRegistry(credentialsId: 'registry_github', url: 'https://ghcr.io'){
                sh '''
                   docker pull $REGISTRY/${DOCKER_IMAGE}:${SNAPSHOT_TAG}
                '''
            
             }
        }
        }
             
    }


        // Retag de l'image SNAPSHOT avec le tag de version (RELEASE_TAG) et push sur Harbor
        // stage('Tag and Push as Release') {
        //     steps {
        //         withCredentials([usernamePassword(
        //             credentialsId: "token-harbor",
        //             usernameVariable: "DOCKER_USER",
        //             passwordVariable: "DOCKER_PASSWORD"
        //         )]) {
        //             sh '''
        //                 docker tag $REGISTRY/$REPO/${DOCKER_IMAGE}:${SNAPSHOT_TAG} $REGISTRY/$REPO/${DOCKER_IMAGE}:${RELEASE_TAG}
        //                 docker push $REGISTRY/$REPO/${DOCKER_IMAGE}:${RELEASE_TAG}
        //             '''
        //         }
        //     }
        // }


        stage('Tag and Push as Release'){
                    steps{
                        script{
                            withDockerRegistry(credentialsId: 'registry_github', url: 'https://ghcr.io'){
                        sh '''
                         docker tag $REGISTRY/${DOCKER_IMAGE}:${SNAPSHOT_TAG} $REGISTRY/${DOCKER_IMAGE}:${RELEASE_TAG}
                         docker push $REGISTRY/${DOCKER_IMAGE}:${RELEASE_TAG}
                        '''
                    
                    }
                }
                }
                    
            }


        // D√©ploiement de l'image versionn√©e en environnement de production (ex√©cution locale sur port 8086)
        stage('Deploy to Production') {
            steps {
                sh '''
                    docker stop flask-app-prod || true
                    docker rm flask-app-prod || true

                    docker run -d -p 8091:8085 --name flask-app-prod $REGISTRY/${DOCKER_IMAGE}:${RELEASE_TAG}
                '''
            }
        }
    }

    // post {
    //     // Affichage d'un message de succ√®s dans Jenkins
    //     success {
    //         echo "‚úÖ D√©ploiement en PROD termin√© pour la release ${RELEASE_TAG}"
    //     }

    //     // Affichage d'un message d'√©chec dans Jenkins
    //     failure {
    //         echo "‚ùå √âchec du d√©ploiement en PROD pour la release ${RELEASE_TAG}"
    //     }

    //     // Envoi d'une notification Slack quel que soit le r√©sultat
    //     always {
    //         slackSend channel: "jenkins-lcf", 
    //             message: "üõ†Ô∏è Pipeline: *${env.JOB_NAME}* #${env.BUILD_NUMBER} | üîó <${env.BUILD_URL}|Voir build> | *Statut:* ${currentBuild.currentResult}"
    //     }
    // }

    post {
           always {
             script {
             def jobName= env.JOB_NAME
             def buildNumber = env.BUILD_NUMBER
             def pipelineStatus = currentBuild.result ?: 'UNKNOWN'
             def bannerColor = pipelineStatus.toUpperCase() == 'SUCCESS' ? 'green' : 'red'
             def body= """
                         <html>
                         <body>
                         <div style="border: 4px solid ${bannerColor}; padding:
                         10px;">
                         10px;">
                         ${pipelineStatus.toUpperCase()}</h3>
                         </div>
                         <h2>${jobName} Build
                         ${buildNumber}</h2>
                         <div style="background-color:
                         ${bannerColor}; padding:
                         <h3 style="color: white;">Pipeline
                         Status:
                         <p>Check the <a href="${BUILD_URL}">console
                         output</a>.</p>
                         </div>
                         </body>
                         </html>
                         """
                 emailext (
                 subject: "${jobName}- Build ${buildNumber}${pipelineStatus.toUpperCase()}",
                 body: body,
                 to:
                 'seyeadam1@gmail.com',
                 from: 'jenkins@example.com',
                 replyTo: 'jenkins@example.com',
                 mimeType: 'text/html',
                 attachmentsPattern: 'trivy-report.txt'
                 )
          }
        }
     }
}
