pipeline {

    // Utilisation du nouvel agent cloud Docker Python
    agent { label 'python-agent' }

    environment {
    	// R√©pertoire d'installation du scanner SonarQube d√©clar√© dans Jenkins
    	SCANNER_HOME = tool 'sonarqube'

    	// Nom de base de l'image Docker de l'application
    	DOCKER_IMAGE = 'flaskapp-image'

    	// Tag de version utilis√© pour l'environnement de d√©veloppement
    	DOCKER_TAG = 'dev-SNAPSHOT'
    }

    stages {

        // R√©cup√©ration du code source depuis le d√©p√¥t GitHub
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        // Ex√©cution des tests unitaires avec Pytest + g√©n√©ration du rapport de couverture avec Coverage
        stage('Run Pytest + Coverage') {
            steps {
                sh '''
                    pip3 install --break-system-packages -r requirements.txt
                    pytest
                    coverage run -m pytest
                    coverage report
                    coverage xml
                '''
            }
        }

        // Analyse de la qualit√© du code et du coverage avec SonarQube
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv(credentialsId: 'credentials-sonarqube', installationName: 'sencoin-sonarqube') {
                    sh "${SCANNER_HOME}/bin/sonar-scanner"
                }
            }
        }

        // Construction de l'image Docker de l'application Flask avec le tag 'dev-SNAPSHOT'
        stage('Build Docker Image') {
            steps {
                sh 'docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} .'
            }
        }

        // Scan de s√©curit√© de l'image Docker avec Trivy (affichage des vuln√©rabilit√©s sans bloquer le pipeline)
        stage('Trivy Scan') {
            steps {
                sh '''
                    trivy image \
                      --exit-code 0 \
                      --severity HIGH,CRITICAL \
                      ${DOCKER_IMAGE}:${DOCKER_TAG}
                '''
            }
        }

        // Push de l'image Docker vers le registre Harbor avec authentification
        // stage('Push to Harbor') {
        //     steps {
        //         withCredentials([usernamePassword(
        //             credentialsId: "token-harbor", 
        //             usernameVariable: "DOCKER_USER", 
        //             passwordVariable: "DOCKER_PASSWORD"
        //         )]) {
        //             sh '''
        //                 echo "$DOCKER_PASSWORD" | docker login registry.lcf.io -u "$DOCKER_USER" --password-stdin
        //                 docker tag ${DOCKER_IMAGE}:${DOCKER_TAG} registry.lcf.io/flask-app/${DOCKER_IMAGE}:${DOCKER_TAG}
        //                 docker push registry.lcf.io/flask-app/${DOCKER_IMAGE}:${DOCKER_TAG}
        //             '''
        //         }
        //     }
        // }

        stage('push to github registry'){
             withDockerRegistry(credentialsId: 'registry_github', url: 'https://ghcr.io'){
                sh '''
                    docker tag ${DOCKER_IMAGE}:${DOCKER_TAG} ghcr.io/sencoinsn/${DOCKER_IMAGE}:${DOCKER_TAG}
                    docker push ghcr.io/sencoinsn/${DOCKER_IMAGE}:${DOCKER_TAG}
                '''
             
             }
        }

        // D√©ploiement de l'image en environnement de d√©veloppement (port 8085)
        stage('Simulate Dev Deployment') {
           steps{
            script{
                withDockerRegistry(credentialsId: 'registry_github', url: 'https://ghcr.io'){
                    sh '''
                        docker stop flask-app-dev || true && docker rm flask-app-dev || true
                        docker run -d --name flask-app-dev ghcr.io/sencoinsn/${DOCKER_IMAGE}:${DOCKER_TAG}
                    '''
                }
            }
           }
            

        }
    }

    // post {
    //     // Affichage d'un message de succ√®s dans Jenkins
    //     success {
    //         echo "‚úÖ D√©ploiement en DEV termin√©"
    //     }

    //     // Affichage d'un message d'√©chec dans Jenkins
    //     failure {
    //         echo "‚ùå √âchec du d√©ploiement en DEV"
    //     }

    //     // Envoi d'une notification Slack dans tous les cas (succ√®s ou √©chec)
    //     always {
    //         slackSend channel: "jenkins-lcf",
    //             message: "üõ†Ô∏è  Pipeline: *${env.JOB_NAME}* #${env.BUILD_NUMBER} | üîó <${env.BUILD_URL}|Voir build> | *Statut:* ${currentBuild.currentResult}"
    //     }
    // }

    post {
           always {
             script {
             def jobName= env.JOB_NAME
             def buildNumber = env.BUILD_NUMBER
             def pipelineStatus = currentBuild.result ?: 'UNKNOWN'
             def bannerColor = pipelineStatus.toUpperCase() == 'SUCCESS' ? 'green' : 'red'
             def body= """
                         <html>
                         <body>
                         <div style="border: 4px solid ${bannerColor}; padding:
                         10px;">
                         10px;">
                         ${pipelineStatus.toUpperCase()}</h3>
                         </div>
                         <h2>${jobName}-PROD- Build
                         ${buildNumber}</h2>
                         <div style="background-color:
                         ${bannerColor}; padding:
                         <h3 style="color: white;">Pipeline
                         Status:
                         <p>Check the <a href="${BUILD_URL}">console
                         output</a>.</p>
                         </div>
                         </body>
                         </html>
                         """
                 emailext (
                 subject: "${jobName}- Build ${buildNumber}${pipelineStatus.toUpperCase()}",
                 body: body,
                 to:
                 'seyeadam1@gmail.com',
                 from: 'jenkins@example.com',
                 replyTo: 'jenkins@example.com',
                 mimeType: 'text/html',
                 attachmentsPattern: 'trivy-report.txt'
                 )
          }
        }
     }
}
